// services/countryWebService.js (ESM version)
import axios from "axios";

/**
 * T·∫°o summary t·ª± nhi√™n cho qu·ªëc gia
 */
function createSummary(c) {
  const name = c.name?.common || "Qu·ªëc gia kh√¥ng r√µ";
  const region = c.region || "kh√¥ng r√µ khu v·ª±c";
  const continent = c.continents?.[0] || "kh√¥ng r√µ ch√¢u l·ª•c";
  const capital = c.capital?.[0] || "kh√¥ng r√µ th·ªß ƒë√¥";
  const population = c.population ? c.population.toLocaleString("vi-VN") : "kh√¥ng r√µ";
  const languages = c.languages ? Object.values(c.languages) : [];
  const currencyObjs = c.currencies ? Object.values(c.currencies) : [];
  const flag = c.flags?.svg || c.flags?.png || "";

  // X·ª≠ l√Ω ng√¥n ng·ªØ
  const langText =
    languages.length === 0
      ? "Ng√¥n ng·ªØ ch∆∞a r√µ"
      : languages.length === 1
      ? `Ng√¥n ng·ªØ ch√≠nh l√† ${languages[0]}`
      : `C√°c ng√¥n ng·ªØ ph·ªï bi·∫øn g·ªìm ${languages.join(", ")}`;

  // X·ª≠ l√Ω ti·ªÅn t·ªá
  const currencyText =
    currencyObjs.length > 0
      ? currencyObjs
          .map(cur => `${cur.name}${cur.symbol ? ` (${cur.symbol})` : ""}`)
          .join(", ")
      : "ch∆∞a r√µ";

  return `üá∫üá≥ ${name} l√† m·ªôt qu·ªëc gia thu·ªôc khu v·ª±c ${region}, n·∫±m ·ªü ch√¢u ${continent}.
Th·ªß ƒë√¥: ${capital}.
D√¢n s·ªë kho·∫£ng ${population} ng∆∞·ªùi.
${langText}.
ƒê∆°n v·ªã ti·ªÅn t·ªá: ${currencyText}.
${flag ? `Qu·ªëc k·ª≥: ${flag}` : ""}`;
}

/**
 * G·ªçi API REST Countries ƒë·ªÉ l·∫•y danh s√°ch t·∫•t c·∫£ qu·ªëc gia
 * @returns {Promise<Array>} danh s√°ch qu·ªëc gia
 */
export async function fetchAllCountries() {
  try {
    const res = await axios.get(
      "https://restcountries.com/v3.1/all?fields=name,cca2,cca3,region,continents,capital,population,area,languages,currencies,flags,translations"
    );

    return res.data.map(c => ({
      name: c.name?.common || "Unknown",
      officialName: c.name?.official || "",
      code: c.cca2 || c.cca3 || "",
      region: c.region || "Unknown",
      continent: c.continents?.[0] || "Unknown",
      capital: c.capital?.[0] || "Unknown",
      population: c.population || 0,
      area: c.area || 0,
      languages: c.languages ? Object.values(c.languages) : [],
      currencies: c.currencies ? Object.values(c.currencies) : [],
      flag: c.flags?.svg || c.flags?.png || "",
      summary: createSummary(c)
    }));
  } catch (err) {
    console.error("‚ùå L·ªói fetchAllCountries:", err.message);
    return [];
  }
}

/**
 * G·ªçi API REST Countries ƒë·ªÉ l·∫•y th√¥ng tin m·ªôt qu·ªëc gia theo t√™n
 * @param {string} name - t√™n qu·ªëc gia
 * @returns {Promise<Object>} th√¥ng tin qu·ªëc gia ho·∫∑c error
 */
export async function fetchCountryInfo(name) {
  if (!name) return { success: false, error: "Thi·∫øu t√™n qu·ªëc gia" };
  try {
    const res = await axios.get(
      `https://restcountries.com/v3.1/name/${encodeURIComponent(name)}?fullText=true`
    );
    if (res.data && res.data[0]) {
      const c = res.data[0];
      return {
        success: true,
        name: c.name?.common || "Unknown",
        officialName: c.name?.official || "",
        code: c.cca2 || c.cca3 || "",
        region: c.region || "Unknown",
        continent: c.continents?.[0] || "Unknown",
        capital: c.capital?.[0] || "Unknown",
        population: c.population || 0,
        languages: c.languages ? Object.values(c.languages) : [],
        currencies: c.currencies ? Object.values(c.currencies) : [],
        flag: c.flags?.svg || c.flags?.png || "",
        summary: createSummary(c)
      };
    }
    return { success: false, error: `Kh√¥ng t√¨m th·∫•y th√¥ng tin cho qu·ªëc gia "${name}"` };
  } catch (err) {
    console.error("‚ùå L·ªói fetchCountryInfo:", err.message);
    return { success: false, error: "Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu qu·ªëc gia t·ª´ API" };
  }
}