// services/aiWrapper.js (ESM version, optimized & sanitized)
import { askAI } from "./ai.js";

/**
 * L√†m s·∫°ch output AI: b·ªè c√°c intro l·ªói k·ªπ thu·∫≠t, xin l·ªói th·ª´a
 */
function sanitizeAIOutput(text = "") {
  return text
    .replace(/^C√≥ v·∫ª nh∆∞.*?(s·ª± c·ªë|l·ªói|tr·ª•c tr·∫∑c|v·∫•n ƒë·ªÅ).*?\.\s*/gi, "")
    .replace(/^(Xin l·ªói|T√¥i xin l·ªói|R·∫•t ti·∫øc).*?\.\s*/gi, "")
    .replace(/^(Tuy nhi√™n, )?n·∫øu b·∫°n.*?(mu·ªën|c·∫ßn).*?(vi·∫øt ti·∫øp|m·ªü r·ªông|k·∫øt lu·∫≠n).*?\.\s*/gi, "")
    .trim();
}

/**
 * G·ªçi askAI v·ªõi timeout + retry + h·ªó tr·ª£ history (li·ªÅn m·∫°ch h·ªôi tho·∫°i)
 * @param {string} sessionId
 * @param {string|object} payload - message ho·∫∑c { message, history }
 * @param {number} timeoutMs - th·ªùi gian t·ªëi ƒëa (ms) cho m·ªói l·∫ßn g·ªçi
 * @param {number} maxRetries - s·ªë l·∫ßn th·ª≠ l·∫°i
 * @returns {Promise<string>} - c√¢u tr·∫£ l·ªùi ho·∫∑c fallback
 */
export async function askAIWithRetry(
  sessionId,
  payload,
  timeoutMs = 8000,
  maxRetries = 1
) {
  async function callWithTimeout() {
    const timeoutPromise = new Promise((_, reject) =>
      setTimeout(() => reject(new Error("AI Timeout")), timeoutMs)
    );
    return Promise.race([askAI(sessionId, payload), timeoutPromise]);
  }

  let attempt = 0;
  while (attempt <= maxRetries) {
    try {
      attempt++;
      if (process.env.NODE_ENV !== "production") {
        console.log(`üöÄ askAI attempt ${attempt} (session=${sessionId})`);
      }
      let answer = await callWithTimeout();

      // Chu·∫©n h√≥a ki·ªÉu d·ªØ li·ªáu
      if (typeof answer === "object" && answer !== null) {
        answer = answer.answer || answer.content || JSON.stringify(answer);
      }
      if (typeof answer !== "string") {
        answer = String(answer || "");
      }

      // N·∫øu tr·∫£ v·ªÅ r·ªóng ‚Üí th·ª≠ l·∫°i
      if (!answer.trim()) {
        throw new Error("Empty AI response");
      }

      // L√†m s·∫°ch output tr∆∞·ªõc khi tr·∫£ v·ªÅ
      return sanitizeAIOutput(answer);
    } catch (err) {
      console.error(`‚ö†Ô∏è askAI attempt ${attempt} failed:`, err.message);

      if (attempt > maxRetries) {
        // fallback th√¥ng minh h∆°n: n·∫øu c√≥ history th√¨ g·ª£i √Ω user
        if (typeof payload === "object" && payload.history?.length) {
          const lastUserMsg = payload.history
            .slice()
            .reverse()
            .find((m) => m.role === "user")?.content;

          return `Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y (AI qu√° t·∫£i ho·∫∑c ph·∫£n h·ªìi ch·∫≠m).
Tuy nhi√™n, b·∫°n v·ª´a h·ªèi: "${lastUserMsg}". B·∫°n c√≥ th·ªÉ th·ª≠ di·ªÖn ƒë·∫°t l·∫°i ho·∫∑c h·ªèi chi ti·∫øt h∆°n.`;
        }

        return "Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y (AI qu√° t·∫£i ho·∫∑c ph·∫£n h·ªìi ch·∫≠m).";
      }

      // exponential backoff: 500ms, 1000ms, 2000ms...
      const delay = 500 * Math.pow(2, attempt - 1);
      if (process.env.NODE_ENV !== "production") {
        console.log(`‚è≥ Retry sau ${delay}ms...`);
      }
      await new Promise((r) => setTimeout(r, delay));
    }
  }
}