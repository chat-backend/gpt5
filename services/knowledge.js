// services/knowledge.js (ESM version, full 5 sources)
import fetch from "node-fetch";
import {
  addMessage,
  buildContextForAI,
  autoSummarize,
  getLastAnswer
} from "../services/memory.js";
import { askAIWithRetry } from "./aiWrapper.js";
import { googleSearch } from "./search.js"; // Google Custom Search

/* ----------------------------- Helpers ----------------------------- */
function truncate(str, max = 1200) {
  if (!str) return str;
  return str.length > max ? str.slice(0, max) + "‚Ä¶" : str;
}
function stripHtml(str) {
  return str ? str.replace(/<\/?[^>]+(>|$)/g, "") : str;
}

/* ----------------------------- Wikipedia ----------------------------- */
export async function fetchWikiSummary(query) {
  try {
    const url = `https://vi.wikipedia.org/api/rest_v1/page/summary/${encodeURIComponent(query)}`;
    const res = await fetch(url);
    if (!res.ok) return null;
    const data = await res.json();
    return {
      title: data.title || query,
      extract: data.extract || null,
      shortDescription: data.description || null,
      url: data.content_urls?.desktop?.page || `https://vi.wikipedia.org/wiki/${encodeURIComponent(query)}`,
      thumbnail: data.thumbnail?.source || null,
      lang: data.lang || "vi"
    };
  } catch (err) {
    console.error("‚ùå L·ªói fetch Wikipedia:", err.message);
    return null;
  }
}

export async function fetchWikiSearchWithSummaries(query, limit = 5) {
  try {
    const url = `https://vi.wikipedia.org/w/api.php?action=query&list=search&srsearch=${encodeURIComponent(query)}&utf8=&format=json&srlimit=${limit}`;
    const res = await fetch(url);
    if (!res.ok) return [];
    const data = await res.json();
    const searchResults = data?.query?.search || [];
    return Promise.all(
      searchResults.map(async (item) => {
        const detail = await fetchWikiSummary(item.title);
        return {
          title: item.title,
          snippet: stripHtml(item.snippet || ""),
          url: `https://vi.wikipedia.org/wiki/${encodeURIComponent(item.title)}`,
          extract: detail?.extract || null,
          shortDescription: detail?.shortDescription || null,
          thumbnail: detail?.thumbnail || null,
          lang: detail?.lang || "vi"
        };
      })
    );
  } catch (err) {
    console.error("‚ùå L·ªói fetchWikiSearchWithSummaries:", err.message);
    return [];
  }
}

/* ----------------------- Buddhism dictionary ----------------------- */
export async function fetchBuddhismDictionary(query) {
  try {
    const dict = {
      "tam b·∫£o": "Tam B·∫£o l√† Ph·∫≠t, Ph√°p, TƒÉng ‚Äì ba ng√¥i b√°u c·ªßa Ph·∫≠t gi√°o.",
      "ph√°p t·∫°ng": "Ph√°p T·∫°ng c√≥ th·ªÉ ch·ªâ kho t√†ng gi√°o ph√°p, m·ªôt b·ªô ph√°i Ph·∫≠t gi√°o, ho·∫∑c B·ªì T√°t Ph√°p T·∫°ng trong kinh V√¥ L∆∞·ª£ng Th·ªç."
    };
    return dict[query.toLowerCase()] || null;
  } catch (err) {
    console.error("‚ùå L·ªói fetchBuddhismDictionary:", err.message);
    return null;
  }
}

/* ----------------------- General dictionary ----------------------- */
export async function fetchGeneralDictionary(query) {
  try {
    const dict = {
      "ai": "Tr√≠ tu·ªá nh√¢n t·∫°o (Artificial Intelligence) l√† lƒ©nh v·ª±c nghi√™n c·ª©u ph√°t tri·ªÉn h·ªá th·ªëng c√≥ kh·∫£ nƒÉng h·ªçc h·ªèi v√† suy lu·∫≠n.",
      "internet": "Internet l√† m·∫°ng l∆∞·ªõi to√†n c·∫ßu k·∫øt n·ªëi h√†ng t·ª∑ thi·∫øt b·ªã, cho ph√©p trao ƒë·ªïi th√¥ng tin."
    };
    return dict[query.toLowerCase()] || null;
  } catch (err) {
    console.error("‚ùå L·ªói fetchGeneralDictionary:", err.message);
    return null;
  }
}

/* --------------------------- Main aggregator --------------------------- */
export async function getKnowledgeAnswer(query, sessionId = "default", intent = "knowledge") {
  addMessage(sessionId, "user", query, { intent });

  // G·ªçi song song 4 ngu·ªìn ngo√†i
  const [wikiAns, googleResults, buddhismAns, generalAns] = await Promise.all([
    fetchWikiSummary(query),
    googleSearch(query),
    fetchBuddhismDictionary(query),
    fetchGeneralDictionary(query)
  ]);

  // Fallback Wikipedia search
  let wikiSearchList = [];
  let wikiFirst = null;
  if (!wikiAns?.extract) {
    wikiSearchList = await fetchWikiSearchWithSummaries(query, 5);
    wikiFirst = wikiSearchList[0] || null;
  }

  // Build context
const context = await buildContextForAI(sessionId);

if (intent === "expand") {
  const last = getLastAnswer(sessionId);
  if (last) {
    context.push({
      role: "system",
      content: `üîÑ Ng∆∞·ªùi d√πng mu·ªën b·∫°n vi·∫øt ti·∫øp d·ª±a tr√™n: "${last}"`
    });
  }
} else if (intent === "conclude") {
  const last = getLastAnswer(sessionId);
  if (last) {
    context.push({
      role: "system",
      content: `üìù Ng∆∞·ªùi d√πng mu·ªën b·∫°n vi·∫øt ƒëo·∫°n k·∫øt lu·∫≠n d·ª±a tr√™n: "${last}"`
    });
  }
}

// System prompt
context.unshift({
  role: "system",
  content: `B·∫°n l√† Tr·ª£ l√Ω Th√¥ng Tu·ªá. H√£y t·ªïng h·ª£p th√¥ng tin t·ª´ nhi·ªÅu ngu·ªìn (Wikipedia, Google, T·ª´ ƒëi·ªÉn Ph·∫≠t h·ªçc, T·ª´ ƒëi·ªÉn t·ªïng h·ª£p...) v√† n·ªëi m·∫°ch h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.
- N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu "th√™m", "ti·∫øp t·ª•c", "m·ªü r·ªông", h√£y vi·∫øt ti·∫øp ph·∫ßn tr∆∞·ªõc thay v√¨ l·∫∑p l·∫°i.
- N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu "k·∫øt lu·∫≠n", h√£y vi·∫øt ƒëo·∫°n k·∫øt ng·∫Øn g·ªçn, s√∫c t√≠ch, t·ªïng h·ª£p √Ω ch√≠nh.
- N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu "t√≥m t·∫Øt", h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn.
Lu√¥n gi·ªØ phong c√°ch r√µ r√†ng, m·∫°ch l·∫°c, d·ªÖ hi·ªÉu.`
});

  // Inject ngu·ªìn v√†o context
  const contextSources = [];
  if (wikiAns?.extract) {
    context.push({ role: "system", content: `üìñ Wikipedia (${wikiAns.title}): ${truncate(wikiAns.extract)}` });
    contextSources.push("wiki");
  } else if (wikiFirst?.extract) {
    context.push({ role: "system", content: `üìñ Wikipedia (${wikiFirst.title}): ${truncate(wikiFirst.extract)}` });
    contextSources.push("wiki-search");
  }
  if (googleResults && googleResults.length > 0) {
    const snippets = googleResults.map(r => r.snippet).filter(Boolean).join(" | ");
    context.push({ role: "system", content: `üîé Google: ${truncate(snippets)}` });
    contextSources.push("google");
  }
  if (buddhismAns) {
    context.push({ role: "system", content: `ü™∑ T·ª´ ƒëi·ªÉn Ph·∫≠t h·ªçc: ${truncate(buddhismAns)}` });
    contextSources.push("buddhism");
  }
  if (generalAns) {
    context.push({ role: "system", content: `üìò T·ª´ ƒëi·ªÉn t·ªïng h·ª£p: ${truncate(generalAns)}` });
    contextSources.push("general");
  }

  context.unshift({
    role: "system",
    content: `
B·∫°n l√† Tr·ª£ l√Ω Th√¥ng Tu·ªá. H√£y t·ªïng h·ª£p th√¥ng tin t·ª´ nhi·ªÅu ngu·ªìn (Wikipedia, Google, T·ª´ ƒëi·ªÉn Ph·∫≠t h·ªçc, T·ª´ ƒëi·ªÉn t·ªïng h·ª£p...)
v√† n·ªëi m·∫°ch h·ªôi tho·∫°i tr∆∞·ªõc ƒë√≥.
- N·∫øu ng∆∞·ªùi d√πng y√™u c·∫ßu "th√™m", "ti·∫øp t·ª•c", "m·ªü r·ªông", h√£y vi·∫øt ti·∫øp ph·∫ßn tr∆∞·ªõc thay v√¨ l·∫∑p l·∫°i.
- N·∫øu y√™u c·∫ßu "t√≥m t·∫Øt", h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn.
Lu√¥n gi·ªØ phong c√°ch r√µ r√†ng, m·∫°ch l·∫°c, d·ªÖ hi·ªÉu.`
  });

  try {
    const aiAnswer = await askAIWithRetry(sessionId, { message: query, history: context }, 15000, 2);

    // X√°c ƒë·ªãnh ngu·ªìn d√πng cho finalAnswer
    let finalAnswer;
    const aiText = aiAnswer?.trim();
    const hasWikiDirect = !!wikiAns?.extract;
    const hasWikiSearch = !!wikiFirst?.extract;

    const sources = {
      ai: false,
      wiki: !!wikiAns?.extract || !!wikiFirst?.extract,
      google: googleResults && googleResults.length > 0,
      buddhism: !!buddhismAns,
      general: !!generalAns
    };

    let usedSource = null;
    if (aiText) {
      finalAnswer = aiText;
      sources.ai = true;
      usedSource = "ai";
    } else if (hasWikiDirect) {
      finalAnswer = wikiAns.extract;
      usedSource = "wiki";
    } else if (hasWikiSearch) {
      finalAnswer = wikiFirst.extract;
      usedSource = "wiki-search";
    } else if (buddhismAns) {
      finalAnswer = buddhismAns;
      usedSource = "buddhism";
    } else if (generalAns) {
      finalAnswer = generalAns;
      usedSource = "general";
    } else {
      finalAnswer = "Xin l·ªói, hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ th√¥ng tin cho c√¢u h·ªèi n√†y.";
      usedSource = "system";
    }

    addMessage(sessionId, "assistant", finalAnswer, { intent: "knowledge-answer" });
    await autoSummarize(sessionId);

    const wikiMeta =
      hasWikiDirect
        ? { 
            title: wikiAns.title, 
            url: wikiAns.url, 
            thumbnail: wikiAns.thumbnail, 
            shortDescription: wikiAns.shortDescription, 
            lang: wikiAns.lang 
          }
        : hasWikiSearch
        ? { 
            title: wikiFirst.title, 
            url: wikiFirst.url, 
            thumbnail: wikiFirst.thumbnail, 
            shortDescription: wikiFirst.shortDescription, 
            lang: wikiFirst.lang 
          }
        : null;

    // Chi ti·∫øt ngu·ªìn ƒë·ªÉ UI hi·ªÉn th·ªã r√µ
    const sourceDetails = {
      usedForAnswer: usedSource,               // ngu·ªìn ƒë∆∞·ª£c d√πng cho finalAnswer
      contributedToContext: contextSources,    // danh s√°ch ngu·ªìn ƒë√£ inject v√†o context
      available: Object.keys(sources).filter(k => sources[k]) // ngu·ªìn c√≥ d·ªØ li·ªáu
    };

    return {
      sessionId,
      answer: finalAnswer,
      sources,           // flags ƒë∆°n gi·∫£n: ngu·ªìn n√†o c√≥ d·ªØ li·ªáu
      sourceDetails,     // chi ti·∫øt r√µ r√†ng cho UI
      wikiMeta,
      wikiSearchList,
      googleResults,     // danh s√°ch k·∫øt qu·∫£ Google
      suggestions: []
    };
  } catch (err) {
    console.error("‚ùå L·ªói khi g·ªçi AI:", err.message);
    return {
      sessionId,
      answer: "Xin l·ªói, hi·ªán t·∫°i m√¨nh ch∆∞a c√≥ th√¥ng tin cho c√¢u h·ªèi n√†y.",
      sources: { ai: false, wiki: false, google: false, buddhism: false, general: false },
      sourceDetails: { usedForAnswer: "system", contributedToContext: [], available: [] },
      wikiMeta: null,
      wikiSearchList: [],
      googleResults: [],
      suggestions: []
    };
  }
}