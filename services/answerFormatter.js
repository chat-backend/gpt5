// services/answerFormatter.js (ESM version, minimal & clean)

// H√†m t·∫°o tag ngu·ªìn chu·∫©n
function formatSourceTag(source = "AI") {
  return `üåê (ngu·ªìn: ${source})`;
}

// H√†m xo√° c√°c d√≤ng ngu·ªìn c≈© (n·∫øu c√≥)
function stripExistingSources(text = "") {
  return text
    .split("\n")
    .filter(line =>
      !/^\s*(üåê\s*\(ngu·ªìn:.*\)|Ngu·ªìn\s*:\s*.*|source\s*:\s*.*)$/i.test(line.trim())
    )
    .join("\n")
    .replace(/\n{3,}/g, "\n\n")
    .trim();
}

// H√†m xo√° c√°c intro l·ªói k·ªπ thu·∫≠t
function stripErrorIntros(text = "") {
  return text
    .replace(/^C√≥ v·∫ª nh∆∞ (c√≥|ƒëang c√≥) (m·ªôt )?(s·ª± c·ªë|l·ªói).*?\.\s*/gi, "")
    .replace(/^Xin l·ªói.*?\.\s*/gi, "")
    .trim();
}

// H√†m fallback m·∫∑c ƒë·ªãnh
function getFallbackMessage() {
  return "Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a c√≥ th√¥ng tin cho c√¢u h·ªèi n√†y.";
}

// H√†m format c√¢u tr·∫£ l·ªùi cu·ªëi c√πng
export function formatAnswer(intent, rawAnswer, source = "AI") {
  let body = "";

  if (typeof rawAnswer === "string") {
    body = rawAnswer.trim();
  } else if (rawAnswer) {
    body = String(rawAnswer).trim();
  }

  if (!body) {
    return `${getFallbackMessage()}\n\n${formatSourceTag(source)}`;
  }

  // X·ª≠ l√Ω n·ªôi dung
  body = stripExistingSources(body);
  body = stripErrorIntros(body);

  // Tr·∫£ v·ªÅ body + ngu·ªìn
  return `${body}\n\n${formatSourceTag(source)}`;
}