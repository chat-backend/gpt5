// services/smartAssistant.js (ESM version)

// =======================
// 1. Intent Service
// =======================
const LIGHT_KEYWORDS = ["ng·∫Øn", "t√≥m t·∫Øt", "brief", "nhanh", "ng·∫Øn g·ªçn"];
const DEEP_KEYWORDS = ["ph√¢n t√≠ch", "chi ti·∫øt", "gi·∫£i th√≠ch s√¢u", "l√Ω gi·∫£i", "k·∫øt lu·∫≠n", "m·ªü b√†i", "th√¢n b√†i"];
const EXPAND_KEYWORDS = ["th√™m", "ti·∫øp t·ª•c", "m·ªü r·ªông", "vi·∫øt ti·∫øp", "ph√¢n t√≠ch th√™m"];

async function classifyIntent(message, sessionId = "default") {
  const q = String(message || "").toLowerCase().trim();
  if (q.length < 10 && !DEEP_KEYWORDS.some(k => q.includes(k))) return "light";
  if (EXPAND_KEYWORDS.some(k => q.includes(k))) return "expand";
  if (DEEP_KEYWORDS.some(k => q.includes(k))) return "deep";
  return "knowledge";
}

// =======================
// 2. QA Service + Fallback
// =======================
async function askOpenAIWithHistory(context) {
  const lastUser = context.filter(m => m.role === "user").pop()?.content || "";
  return `Ti·∫øp n·ªëi m·∫°ch h·ªôi tho·∫°i, m·ªü r·ªông: ${lastUser}`;
}

async function buildContextForAI(sessionId) {
  return [
    { role: "system", content: "B·∫°n l√† Tr·ª£ l√Ω Th√¥ng Tu·ªá, n·ªëi m·∫°ch h·ªôi tho·∫°i m·∫°ch l·∫°c, t·ª± nhi√™n." },
    { role: "assistant", content: "ƒê√£ s·∫µn s√†ng ti·∫øp n·ªëi ch·ªß ƒë·ªÅ." }
  ];
}

async function withTimeout(promise, ms, fallback = null) {
  return await Promise.race([
    promise,
    new Promise(resolve => setTimeout(() => resolve(fallback), ms))
  ]);
}

function getRandomFallback() {
  const picks = [
    "Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.",
    "H·ªá th·ªëng ƒëang b·∫≠n, b·∫°n th·ª≠ di·ªÖn ƒë·∫°t l·∫°i ho·∫∑c h·ªèi c·ª• th·ªÉ h∆°n nh√©.",
    "T·∫°m th·ªùi t√¥i ch∆∞a c√≥ ƒë√°p √°n ph√π h·ª£p, xin b·∫°n ch·ªù trong gi√¢y l√°t."
  ];
  return picks[Math.floor(Math.random() * picks.length)];
}

async function getFallbackAnswer(sessionId, message, context) {
  return `Ti·∫øp n·ªëi √Ω tr∆∞·ªõc, xin b·ªï sung: ${message}`;
}

async function fallbackAI(message, sessionId = "default") {
  try {
    const context = await buildContextForAI(sessionId);
    context.unshift({
      role: "system",
      content:
        "B·∫°n l√† m·ªôt tr·ª£ l√Ω uy·ªÉn chuy·ªÉn, ∆∞u ti√™n n·ªëi m·∫°ch h·ªôi tho·∫°i theo ch·ªß ƒë·ªÅ tr∆∞·ªõc ƒë√≥. " +
        "N·∫øu ng∆∞·ªùi d√πng g√µ 'th√™m', 'ti·∫øp t·ª•c', 'm·ªü r·ªông', h√£y b·ªï sung √Ω m·ªõi, kh√¥ng l·∫∑p l·∫°i to√†n b·ªô."
    });
    context.push({ role: "user", content: message });

    const aiAnswer = await withTimeout(askOpenAIWithHistory(context), 8000, null);
    if (aiAnswer && typeof aiAnswer === "string" && aiAnswer.trim()) return aiAnswer.trim();

    const fb = await getFallbackAnswer(sessionId, message, context);
    return typeof fb === "string" ? fb : String(fb ?? getRandomFallback());
  } catch (err) {
    console.error("‚ùå L·ªói fallbackAI:", err);
    return getRandomFallback();
  }
}

// =======================
// 3. Answer By Intent
// =======================
async function getKnowledgeAnswer(query, sessionId, mode, history) {
  return {
    answer: `Tr·∫£ l·ªùi (${mode}) cho c√¢u h·ªèi: ${query}`,
    source: "ai-knowledge"
  };
}

function formatAnswer(intent, answer, source) {
  return { answer, source };
}

async function answerByIntent(intent, query, sessionId = "default", history = []) {
  try {
    console.log("=== [answerByIntent] ===", { intent, sessionId });

    if (intent === "expand") {
      const fbExpand = await fallbackAI(query, sessionId);
      return formatAnswer("knowledge", fbExpand, "ai-fallback");
    }

    if (intent === "short" || intent === "light") {
      const res = await getKnowledgeAnswer(query, sessionId, "short", history);
      return formatAnswer("light", String(res?.answer ?? ""), res?.source || "ai");
    }

    if (intent === "deep") {
      const res = await getKnowledgeAnswer(query, sessionId, "deep", history);
      return formatAnswer("deep", String(res?.answer ?? ""), res?.source || "ai");
    }

    const res = await getKnowledgeAnswer(query, sessionId, "knowledge", history);
    return formatAnswer("knowledge", String(res?.answer ?? ""), res?.source || "ai");
  } catch (err) {
    console.error("‚ùå L·ªói answerByIntent:", err);
    try {
      const fb = await getFallbackAnswer(sessionId, query, history);
      return formatAnswer(intent, typeof fb === "string" ? fb : String(fb ?? getRandomFallback()), "ai-fallback");
    } catch (fbErr) {
      console.error("‚ùå L·ªói getFallbackAnswer:", fbErr);
      return formatAnswer(intent, "Xin l·ªói, hi·ªán t·∫°i t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.", "system");
    }
  }
}

// =======================
// 4. Smart Assistant
// =======================
export async function smartAssistant(message, sessionId = "default") {
  try {
    const intent = await classifyIntent(message, sessionId);
    console.log(`[smartAssistant] intent=${intent}, session=${sessionId}`);

    let result = await answerByIntent(intent, message, sessionId);
    if (!result || !result.answer) {
      result = { answer: "Xin l·ªói, t√¥i ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.", source: "system" };
    }

    const ans = String(result.answer || "").trim();
    let formattedAnswer;

    switch (intent) {
      case "short":
      case "light":
        formattedAnswer = `üëâ ${ans}`;
        break;
      case "expand":
        formattedAnswer = `üîÑ Ti·∫øp n·ªëi √Ω tr∆∞·ªõc:\n${ans}`;
        break;
      case "deep":
        formattedAnswer = `üìö M·ªü b√†i: ƒê·∫∑t v·∫•n ƒë·ªÅ.\n\nüìù Th√¢n b√†i: ${ans}\n\n‚úÖ K·∫øt lu·∫≠n: Kh√°i qu√°t v√† nh·∫•n m·∫°nh √Ω nghƒ©a.`;
        break;
      case "knowledge":
      default:
        const intros = ["üí°", "üìñ", "üîç", "‚ú®"];
        const intro = intros[Math.floor(Math.random() * intros.length)];
        formattedAnswer = `${intro} ${ans}`;
        break;
    }

    return {
      success: true,
      intent,
      answer: formattedAnswer,
      source: result.source || "AI",
      sessionId,
      timestamp: new Date().toISOString()
    };
  } catch (err) {
    console.error("‚ùå smartAssistant error:", err);
    return {
      success: false,
      intent: "general",
      answer: "Xin l·ªói, t√¥i ch∆∞a th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y ngay l√∫c n√†y.",
      source: "system",
      sessionId,
      timestamp: new Date().toISOString()
    };
  }
}