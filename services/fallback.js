// services/fallback.js (ESM version)
import { askAIWithRetry } from "./aiWrapper.js";

/**
 * Fallback cu·ªëi c√πng: lu√¥n g·ªçi AI ƒë·ªÉ c·ªë g·∫Øng tr·∫£ l·ªùi b·∫•t k·ª≥ c√¢u h·ªèi n√†o.
 * ƒê·ªìng th·ªùi log l·∫°i sessionId + query ƒë·ªÉ d·ªÖ debug.
 * @param {string} sessionId
 * @param {string} query
 * @param {Array} history
 * @returns {Promise<string>}
 */
export async function getFallbackAnswer(sessionId, query, history = []) {
  console.log("‚ö†Ô∏è [FALLBACK] R∆°i v√†o fallback");
  console.log("   üëâ sessionId:", sessionId);
  console.log("   üëâ query:", query);

  try {
    const aiAnswer = await askAIWithRetry(
      sessionId,
      { message: query, history },
      12000,
      2
    );

    // Chu·∫©n h√≥a k·∫øt qu·∫£ th√†nh string
    if (typeof aiAnswer === "object" && aiAnswer !== null) {
      return aiAnswer.answer || aiAnswer.content || JSON.stringify(aiAnswer);
    }
    return String(aiAnswer ?? "");
  } catch (err) {
    console.error("‚ùå L·ªói getFallbackAnswer:", err.message);
    // N·∫øu AI c≈©ng l·ªói, m·ªõi tr·∫£ v·ªÅ c√¢u fallback m·∫∑c ƒë·ªãnh
    return "Xin l·ªói, hi·ªán t·∫°i m√¨nh ch∆∞a th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu n√†y.";
  }
}