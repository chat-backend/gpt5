// services/memory.js (ESM version) - B·ªô nh·ªõ h·ªôi tho·∫°i n√¢ng c·∫•p t·ªëi ∆∞u
// ============================================================
// - TTL cho session
// - Gi·ªØ t·ªëi ƒëa N tin nh·∫Øn
// - C√≥ summary + topic ƒë·ªÉ n·ªëi m·∫°ch
// - H·ªó tr·ª£ intent m·ªü r·ªông: expand, conclude, summarize, explain, knowledge, short, compare, analyze
// - AutoSummarize ƒë·ªãnh k·ª≥ ƒë·ªÉ gi·∫£m t·∫£i
// - Lu√¥n ƒë∆∞a summary + c√¢u tr·∫£ l·ªùi cu·ªëi c·ªßa assistant + user message v√†o context
// - B·∫£o to√†n metadata khi c·∫Øt b·ªõt
// ============================================================

import dotenv from "dotenv";
dotenv.config();

import OpenAI from "openai";

// ==========================
// ‚öôÔ∏è C·∫•u h√¨nh
// ==========================
const conversations = {};
const MAX_MESSAGES = Number(process.env.MAX_MESSAGES || 40);
const SUMMARIZE_INTERVAL = 30; // ƒë·ªãnh k·ª≥ m·ªói 30 tin nh·∫Øn
const SESSION_TTL = Number(process.env.SESSION_TTL || 86400); // gi√¢y (1 ng√†y)

// üîë OpenAI client (d√πng cho summarizer)
if (!process.env.OPENAI_API_KEY) {
  console.warn("‚ö†Ô∏è OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh trong .env");
}
const client = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// ==========================
// üßπ D·ªçn session h·∫øt h·∫°n
// ==========================
function cleanupSessions() {
  const now = Date.now();
  for (const [id, session] of Object.entries(conversations)) {
    const updatedAt = new Date(session.updatedAt).getTime();
    if (now - updatedAt > SESSION_TTL * 1000) {
      delete conversations[id];
    }
  }
}

// ==========================
// ‚ûï Th√™m tin nh·∫Øn
// ==========================
export function addMessage(sessionId, role, content, metadata = {}) {
  if (!["user", "assistant", "system"].includes(role)) return;
  const text = String(content || "").trim();
  if (!text) return;

  if (!conversations[sessionId]) {
    conversations[sessionId] = {
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      messages: [],
      summary: "",
      topic: "",
    };
  }

  const session = conversations[sessionId];
  session.messages.push({
    role,
    content: text,
    timestamp: new Date().toISOString(),
    metadata,
  });
  session.updatedAt = new Date().toISOString();

  if (metadata.topic && !session.topic) {
    session.topic = metadata.topic;
  }

  if (session.messages.length > MAX_MESSAGES) {
    session.messages = session.messages.slice(-MAX_MESSAGES);
  }

  // AutoSummarize ƒë·ªãnh k·ª≥
  if (session.messages.length % SUMMARIZE_INTERVAL === 0) {
    autoSummarize(sessionId);
  }

  cleanupSessions();
}

// ==========================
// üìñ L·∫•y h·ªôi tho·∫°i
// ==========================
export function getConversation(sessionId) {
  cleanupSessions();
  return conversations[sessionId]?.messages || [];
}

// üìñ L·∫•y tin nh·∫Øn cu·ªëi
export function getLastMessage(sessionId) {
  const conv = getConversation(sessionId);
  return conv.length > 0 ? conv[conv.length - 1] : null;
}

// üìñ L·∫•y c√¢u tr·∫£ l·ªùi cu·ªëi c·ªßa assistant
export function getLastAnswer(sessionId) {
  const conv = getConversation(sessionId);
  const lastAssistant = [...conv].reverse().find((m) => m.role === "assistant");
  return lastAssistant ? lastAssistant.content : null;
}

// üìñ L·∫•y tin nh·∫Øn cu·ªëi c·ªßa user
export function getLastUserMessage(sessionId) {
  const conv = getConversation(sessionId);
  const lastUser = [...conv].reverse().find((m) => m.role === "user");
  return lastUser ? lastUser.content : null;
}

// üóëÔ∏è X√≥a session
export function clearConversation(sessionId) {
  delete conversations[sessionId];
}

// üìã Th√¥ng tin session
export function getSessionInfo(sessionId) {
  const s = conversations[sessionId];
  return s
    ? {
        createdAt: s.createdAt,
        updatedAt: s.updatedAt,
        length: s.messages.length,
        topic: s.topic,
        summary: s.summary,
      }
    : null;
}

// üìã L·∫•y danh s√°ch session
export function listSessions() {
  cleanupSessions();
  return Object.keys(conversations);
}

// ==========================
// üß† buildContextForAI
// ==========================
export async function buildContextForAI(sessionId) {
  const session = conversations[sessionId];
  if (!session) return [];

  const conv = session.messages;
  const lastMsg = conv[conv.length - 1];
  const lastUser = getLastUserMessage(sessionId);
  const lastAssistant = getLastAnswer(sessionId);

  const extendedIntents = [
    "expand",
    "conclude",
    "summarize",
    "explain",
    "knowledge",
    "short",
    "compare",
    "analyze",
  ];

  const needMore = extendedIntents.includes(lastMsg?.metadata?.intent);
  const recent = needMore ? conv.slice(-20) : conv.slice(-10);

  const systemPrompt = {
    role: "system",
    content: `
B·∫°n l√† m·ªôt tr·ª£ l√Ω th√¥ng minh, lu√¥n n·ªëi m·∫°ch h·ªôi tho·∫°i.
Ch·ªß ƒë·ªÅ: ${session.topic || "ch∆∞a x√°c ƒë·ªãnh"}.
T√≥m t·∫Øt: ${session.summary || "ch∆∞a c√≥"}.
Intent g·∫ßn nh·∫•t: ${lastMsg?.metadata?.intent || "general"}.

‚ö†Ô∏è Quy t·∫Øc quan tr·ªçng:
- N·∫øu intent l√† "expand": h√£y vi·∫øt ti·∫øp v√† m·ªü r·ªông n·ªôi dung t·ª´ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc ƒë√≥.
- N·∫øu intent l√† "conclude": h√£y vi·∫øt ƒëo·∫°n k·∫øt lu·∫≠n ng·∫Øn g·ªçn, t·ªïng h·ª£p √Ω ch√≠nh t·ª´ n·ªôi dung tr∆∞·ªõc ƒë√≥.
- N·∫øu intent l√† "summarize": h√£y t√≥m t·∫Øt ng·∫Øn g·ªçn, ch·ªâ n√™u √Ω ch√≠nh.
- N·∫øu intent l√† "explain": h√£y gi·∫£i th√≠ch r√µ r√†ng, c√≥ v√≠ d·ª• minh h·ªça, d·ªÖ hi·ªÉu.
- N·∫øu intent l√† "knowledge": h√£y tr·∫£ l·ªùi ch√≠nh x√°c, c√≥ d·∫´n gi·∫£i, n·ªëi m·∫°ch h·ªôi tho·∫°i.
- N·∫øu intent l√† "short": h√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, s√∫c t√≠ch.
- N·∫øu intent l√† "compare": h√£y so s√°nh r√µ r√†ng, c√≥ c·∫•u tr√∫c.
- N·∫øu intent l√† "analyze": h√£y ph√¢n t√≠ch s√¢u, logic, nhi·ªÅu chi·ªÅu c·∫°nh.
- Tuy·ªát ƒë·ªëi kh√¥ng h·ªèi l·∫°i ng∆∞·ªùi d√πng trong c√°c tr∆∞·ªùng h·ª£p n√†y.
- Lu√¥n n·ªëi m·∫°ch t·ª´ c√¢u tr·∫£ l·ªùi tr∆∞·ªõc, gi·ªØ gi·ªçng vƒÉn nh·∫•t qu√°n, kh√¥ng l·∫∑p l·∫°i nguy√™n vƒÉn ƒëo·∫°n tr∆∞·ªõc.`,
  };

  const summaryNote = session.summary
    ? { role: "system", content: `üìå T√≥m t·∫Øt tr∆∞·ªõc ƒë√≥: ${session.summary}` }
    : null;

  const assistantNote = lastAssistant
    ? { role: "assistant", content: `üìå C√¢u tr·∫£ l·ªùi tr∆∞·ªõc: ${lastAssistant}` }
    : null;

  const userNote = lastUser
    ? { role: "user", content: `üìå Y√™u c·∫ßu g·∫ßn nh·∫•t: ${lastUser}` }
    : null;

  return [
    systemPrompt,
    ...(summaryNote ? [summaryNote] : []),
    ...(assistantNote ? [assistantNote] : []),
    ...(userNote ? [userNote] : []),
    ...recent.map((m) => ({
      role: m.role,
      content: m.metadata?.intent
        ? `[${m.metadata.intent.toUpperCase()}] ${m.content}`
        : m.content,
    })),
  ];
}

// ==========================
// üß† autoSummarize
// ==========================
export async function autoSummarize(sessionId) {
  const session = conversations[sessionId];
  if (!session || session.messages.length < MAX_MESSAGES) return null;

  const text = session.messages.map((m) => `${m.role}: ${m.content}`).join("\n");

  try {
    const response = await client.chat.completions.create({
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content:
            "T√≥m t·∫Øt h·ªôi tho·∫°i th√†nh 3-4 c√¢u ng·∫Øn, gi·ªØ m·∫°ch ch√≠nh. N·∫øu c√≥ th·ªÉ, x√°c ƒë·ªãnh ch·ªß ƒë·ªÅ ch√≠nh.",
        },
        { role: "user", content: text },
      ],
      max_tokens: 200,
    });

    const summary = response.choices[0].message.content.trim();
    session.summary = summary;
    session.updatedAt = new Date().toISOString();

    if (!session.topic && summary) {
      session.topic = summary.split(/[.?!]/)[0];
    }

    // Gi·ªØ l·∫°i summary + 15 tin nh·∫Øn g·∫ßn nh·∫•t, b·∫£o to√†n metadata
    session.messages = [
      { role: "system", content: `üìå T√≥m t·∫Øt: ${summary}`, metadata: { type: "summary" } },
      ...session.messages.slice(-15),
    ];

    return summary;
  } catch (err) {
    if (process.env.NODE_ENV !== "production") {
      console.error("‚ùå L·ªói khi t√≥m t·∫Øt:", err);
    }
    return null;
  }
}