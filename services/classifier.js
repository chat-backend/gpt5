// services/classifier.js (ESM version, t·ª± nhi√™n h∆°n, kh√¥ng √©p t·ª´ kh√≥a)
import OpenAI from "openai";

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// -----------------------
// Rule-based intent/category classifier
// -----------------------
export function ruleBasedCategory(q) {
  const text = (q || "").toLowerCase().trim();
  if (!text) return null;

  // Intent ƒë·∫∑c bi·ªát (n√™n gi·ªØ rule-based)
  if (/^(th√™m|ti·∫øp t·ª•c|m·ªü r·ªông)$/i.test(text)) return "expand";
  if (/(t√≥m t·∫Øt|ng·∫Øn g·ªçn|n√≥i ng·∫Øn)/i.test(text)) return "short";

  // Category n·ªôi dung r√µ r√†ng
  if (/(th·ªùi ti·∫øt|nhi·ªát ƒë·ªô|m∆∞a|n·∫Øng|d·ª± b√°o|kh√≠ h·∫≠u)/i.test(text)) return "weather";
  if (/(tin t·ª©c|b·∫£n tin|th·ªùi s·ª±|headline|tin n√≥ng|24h|24 gi·ªù)/i.test(text)) return "news";

  // C√°c c√¢u h·ªèi tri th·ª©c chung, ƒë·ªãnh nghƒ©a, gi·∫£i th√≠ch...
  // ‚Üí ƒë·ªÉ AI classifier x·ª≠ l√Ω, kh√¥ng √©p t·ª´ kh√≥a
  return null;
}

// -----------------------
// AI classifier (fallback th√¥ng minh)
// -----------------------
export async function aiClassifier(q) {
  const prompt = `
B·∫°n l√† b·ªô ph√¢n lo·∫°i th√¥ng minh. Ng∆∞·ªùi d√πng c√≥ th·ªÉ h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨.
H√£y ph√¢n lo·∫°i c√¢u h·ªèi v√†o 1 trong 8 nh√≥m sau:
- "weather": li√™n quan ƒë·∫øn th·ªùi ti·∫øt, kh√≠ h·∫≠u, d·ª± b√°o.
- "news": li√™n quan ƒë·∫øn tin t·ª©c, s·ª± ki·ªán, b√°o ch√≠.
- "search": li√™n quan ƒë·∫øn nh√¢n v·∫≠t hi·ªán t·∫°i, ƒë·ªãa l√Ω, ch√≠nh tr·ªã, c·∫ßn t√¨m ki·∫øm web.
- "knowledge": ki·∫øn th·ª©c ph·ªï th√¥ng, tri·∫øt h·ªçc, khoa h·ªçc, vƒÉn h√≥a, t√¥n gi√°o, Ph·∫≠t gi√°o, Wikipedia.
- "general": c√°c c√¢u h·ªèi tr√≤ chuy·ªán t·ª± nhi√™n.
- "expand": khi ng∆∞·ªùi d√πng n√≥i "th√™m", "ti·∫øp t·ª•c", "m·ªü r·ªông".
- "short": khi ng∆∞·ªùi d√πng y√™u c·∫ßu tr·∫£ l·ªùi ng·∫Øn g·ªçn, t√≥m t·∫Øt.
- "explain": khi ng∆∞·ªùi d√πng mu·ªën ƒë·ªãnh nghƒ©a, gi·∫£i th√≠ch kh√°i ni·ªám.

V√≠ d·ª•:
- "Tam b·∫£o l√† g√¨?" ‚Üí knowledge
- "√ù nghƒ©a c·ªßa Tam B·∫£o trong Ph·∫≠t gi√°o" ‚Üí knowledge
- "Th√™m" ‚Üí expand
- "T√≥m t·∫Øt ng·∫Øn g·ªçn v·ªÅ B√°t Ch√°nh ƒê·∫°o" ‚Üí short
- "Th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o?" ‚Üí weather
- "Tin t·ª©c 24h m·ªõi nh·∫•t" ‚Üí news
- "T·ªïng th·ªëng M·ªπ hi·ªán t·∫°i l√† ai?" ‚Üí search
- "Xin ch√†o b·∫°n" ‚Üí general

C√¢u h·ªèi: "${q}"
Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 1 t·ª´ trong danh s√°ch tr√™n.
N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y ch·ªçn "general".
`;

  try {
    const res = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 3,
      temperature: 0,
    });

    const raw = res?.choices?.[0]?.message?.content || "";
    const cat = typeof raw === "string" && raw.trim().length > 0
      ? raw.trim().toLowerCase()
      : "general";

    const allowed = [
      "weather",
      "news",
      "search",
      "knowledge",
      "general",
      "expand",
      "short",
      "explain",
    ];

    return allowed.includes(cat) ? cat : "general";
  } catch (err) {
    console.error("‚ùå AI classifier error:", err.message);
    return "general";
  }
}

// -----------------------
// H√†m ph√¢n lo·∫°i t·ªïng h·ª£p
// -----------------------
export async function classifyQuery(q) {
  try {
    if (!q || !q.trim()) return "general";

    const MODE = process.env.CLASSIFIER_MODE || "hybrid";

    if (MODE === "rule") {
      return ruleBasedCategory(q) || "general";
    }

    if (MODE === "ai") {
      return await aiClassifier(q);
    }

    // hybrid (m·∫∑c ƒë·ªãnh)
    let category = ruleBasedCategory(q);
    if (!category) {
      category = await aiClassifier(q);
    }

    console.log(`üëâ classifyQuery: "${q}" ‚Üí ${category}`);
    return category || "general";
  } catch (err) {
    console.error("‚ùå classifyQuery error:", err.message);
    return "general";
  }
}

// -----------------------
// Mapping group
// -----------------------
export function mapGroup(source) {
  const groupMap = {
    weather: "external",
    news: "external",
    search: "external",
    knowledge: "internal",
    general: "internal",
    expand: "internal",   // n·ªëi m·∫°ch h·ªôi tho·∫°i
    short: "internal",    // t√≥m t·∫Øt ng·∫Øn g·ªçn
    explain: "internal",  // gi·∫£i th√≠ch kh√°i ni·ªám
    ai: "external",
    openai: "external",
    "chat-history": "internal",
  };
  return groupMap[source] || "other";
}