// services/nlpService.js (ESM version)
import {
  getNewsStats,
  getNewsCache,
  getWeatherCache,
  getTimeCache,
  getCountriesCache
} from "./cacheService.js";

/**
 * Chu·∫©n h√≥a chu·ªói (b·ªè d·∫•u, lowercase)
 */
function normalize(text) {
  return text
    .toLowerCase()
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "");
}

/**
 * X√°c ƒë·ªãnh intent t·ª´ c√¢u h·ªèi
 */
function detectIntent(q) {
  if (!q) return "other";
  if (q.includes("th·ªùi ti·∫øt") || q.includes("nhi·ªát ƒë·ªô") || q.includes("tr·ªùi th·∫ø n√†o")) return "weather";
  if (q.includes("m·∫•y gi·ªù") || q.includes("b√¢y gi·ªù") || q.includes("th·ªùi gian")) return "time";
  if (q.includes("tin t·ª©c") || q.includes("b√°o ch√≠") || q.includes("news")) return "news";
  if (q.includes("qu·ªëc gia") || q.includes("n∆∞·ªõc") || q.includes("country")) return "country";
  return "other";
}

/**
 * Tr·∫£ l·ªùi c√¢u h·ªèi ng∆∞·ªùi d√πng
 */
export function handleUserQuestion(question) {
  const q = normalize(question || "");
  const intent = detectIntent(q);

  console.log(`[NLP] intent=${intent}, query="${question}"`);

  switch (intent) {
    case "weather": {
      const weather = getWeatherCache();
      if (weather && weather.city) {
        return `Th·ªùi ti·∫øt hi·ªán t·∫°i ·ªü ${weather.city}: ${weather.temperature}¬∞C, ${weather.description}, ƒë·ªô ·∫©m ${weather.humidity}%, gi√≥ ${weather.wind_speed} m/s.`;
      }
      return "Xin l·ªói, hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt.";
    }

    case "time": {
      const time = getTimeCache();
      if (time && time.formatted) {
        return `B√¢y gi·ªù l√† ${time.formatted} (${time.timezone}).`;
      }
      return "Xin l·ªói, hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu th·ªùi gian.";
    }

    case "news": {
      const latest = (getNewsCache() || []).slice(0, 3);
      if (latest.length > 0) {
        return "üì∞ Tin m·ªõi nh·∫•t:\n" + latest.map((a, i) => `${i + 1}. ${a.title} (${a.source})`).join("\n");
      }
      const stats = getNewsStats();
      return stats?.message || "Hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu tin t·ª©c.";
    }

    case "country": {
      const countries = getCountriesCache() || [];
      if (countries.length === 0) {
        return "Xin l·ªói, hi·ªán ch∆∞a c√≥ d·ªØ li·ªáu qu·ªëc gia.";
      }
      // N·∫øu ng∆∞·ªùi d√πng h·ªèi c·ª• th·ªÉ t√™n qu·ªëc gia
      for (const c of countries) {
        const allNames = [c.name, c.code, ...(c.aliases || [])].map(normalize);
        if (allNames.some(n => q.includes(n))) {
          return `${c.name}: ${c.summary}`;
        }
      }
      // N·∫øu kh√¥ng h·ªèi c·ª• th·ªÉ ‚Üí tr·∫£ v·ªÅ th·ªëng k√™
      return `H·ªá th·ªëng hi·ªán c√≥ d·ªØ li·ªáu c·ªßa ${countries.length} qu·ªëc gia. V√≠ d·ª•: ${countries.slice(0, 3).map(c => c.name).join(", ")}...`;
    }

    default:
      return "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi. B·∫°n c√≥ th·ªÉ h·ªèi v·ªÅ th·ªùi ti·∫øt, gi·ªù, tin t·ª©c ho·∫∑c qu·ªëc gia.";
  }
}