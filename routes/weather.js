// routes/weather.js (ESM version)

import dotenv from "dotenv";
dotenv.config();

import fs from "fs/promises";
import axios from "axios";
import path from "path";
import { fileURLToPath } from "url";
import cron from "node-cron";

// ================== CHU·∫®N H√ìA INPUT ==================
function removeAccents(str = "") {
  return String(str)
    .normalize("NFD")
    .replace(/[\u0300-\u036f]/g, "")
    .replace(/ƒë/g, "d")
    .replace(/ƒê/g, "D");
}
function normalizeInput(str) {
  if (!str) return "";
  return removeAccents(str).toLowerCase().trim().replace(/\s+/g, " ");
}

// ================== DANH S√ÅCH 34 T·ªàNH/TH√ÄNH ==================
const provincesVN34 = [
  "An Giang","B·∫Øc Ninh","C√† Mau","Cao B·∫±ng","ƒê·∫Øk L·∫Øk","ƒêi·ªán Bi√™n","ƒê·ªìng Nai","ƒê·ªìng Th√°p",
  "Gia Lai","H√† Tƒ©nh","H∆∞ng Y√™n","Kh√°nh H√≤a","Lai Ch√¢u","L√¢m ƒê·ªìng","L·∫°ng S∆°n","L√†o Cai",
  "Ngh·ªá An","Ninh B√¨nh","Ph√∫ Th·ªç","Qu·∫£ng Ng√£i","Qu·∫£ng Ninh","Qu·∫£ng Tr·ªã","S∆°n La","T√¢y Ninh",
  "Th√°i Nguy√™n","Thanh H√≥a","TP. C·∫ßn Th∆°","TP. ƒê√† N·∫µng","TP. H√† N·ªôi","TP. H·∫£i Ph√≤ng",
  "TP. H·ªì Ch√≠ Minh","TP. Hu·∫ø","Tuy√™n Quang","Vƒ©nh Long"
];

// ================== MAPPING T·ªàNH -> API CITY ==================
// M·ªôt s·ªë t·ªânh kh√¥ng c√≥ d·ªØ li·ªáu tr·ª±c ti·∫øp, ph·∫£i d√πng th·ªß ph·ªß
const provinceToApiName = {
  "An Giang": "Long Xuyen",
  "B·∫Øc Ninh": "Bac Ninh",
  "C√† Mau": "Ca Mau",
  "Cao B·∫±ng": "Cao Bang",
  "ƒê·∫Øk L·∫Øk": "Buon Ma Thuot",
  "ƒêi·ªán Bi√™n": "Dien Bien Phu",
  "ƒê·ªìng Nai": "Bien Hoa",
  "ƒê·ªìng Th√°p": "Cao Lanh",
  "Gia Lai": "Pleiku",
  "H√† Tƒ©nh": "Ha Tinh",
  "H∆∞ng Y√™n": "Hung Yen",
  "Kh√°nh H√≤a": "Nha Trang",
  "Lai Ch√¢u": "Lai Chau",
  "L√¢m ƒê·ªìng": "Da Lat",
  "L·∫°ng S∆°n": "Lang Son",
  "L√†o Cai": "Lao Cai",
  "Ngh·ªá An": "Vinh",
  "Ninh B√¨nh": "Ninh Binh",
  "Ph√∫ Th·ªç": "Viet Tri",
  "Qu·∫£ng Ng√£i": "Quang Ngai",
  "Qu·∫£ng Ninh": "Ha Long",
  "Qu·∫£ng Tr·ªã": "Dong Ha",
  "S∆°n La": "Son La",
  "T√¢y Ninh": "Tay Ninh",
  "Th√°i Nguy√™n": "Thai Nguyen",
  "Thanh H√≥a": "Thanh Hoa",
  "TP. C·∫ßn Th∆°": "Can Tho",
  "TP. ƒê√† N·∫µng": "Da Nang",
  "TP. H√† N·ªôi": "Hanoi",
  "TP. H·∫£i Ph√≤ng": "Haiphong",
  "TP. H·ªì Ch√≠ Minh": "Ho Chi Minh City",
  "TP. Hu·∫ø": "Hue",
  "Tuy√™n Quang": "Tuyen Quang",
  "Vƒ©nh Long": "Vinh Long"
};

// ================== ALIASES ==================
// C√°c c√°ch g·ªçi kh√°c nhau c·ªßa c√πng m·ªôt t·ªânh/th√†nh
const provinceAliases = {
  "TP. ƒê√† N·∫µng": ["da nang", "danang", "tp da nang"],
  "TP. H√† N·ªôi": ["ha noi", "hanoi", "tp ha noi"],
  "TP. H·ªì Ch√≠ Minh": ["ho chi minh", "hcm", "tp hcm", "sai gon", "saigon"],
  "TP. H·∫£i Ph√≤ng": ["hai phong", "haiphong", "tp hai phong"],
  "TP. C·∫ßn Th∆°": ["can tho", "tp can tho"],
  "TP. Hu·∫ø": ["hue", "tp hue", "thua thien hue"]
};

// ================== FILE PATH & API KEY ==================
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
const weatherFilePath = path.join(__dirname, "..", "data", "weather.json");

const API_KEY = process.env.OPENWEATHER_API_KEY;

// ================== FORMATTER ==================
function getWeatherEmoji(description = "") {
  const desc = description.toLowerCase();
  if (desc.includes("n·∫Øng") || desc.includes("clear")) return "‚òÄÔ∏è";
  if (desc.includes("m√¢y r·∫£i r√°c") || desc.includes("scattered")) return "üå•Ô∏è";
  if (desc.includes("m√¢y") || desc.includes("cloud") || desc.includes("overcast")) return "‚òÅÔ∏è";
  if (desc.includes("m∆∞a") || desc.includes("rain")) return "üåßÔ∏è";
  if (desc.includes("gi√¥ng") || desc.includes("thunder")) return "‚õàÔ∏è";
  if (desc.includes("tuy·∫øt") || desc.includes("snow")) return "‚ùÑÔ∏è";
  if (desc.includes("s∆∞∆°ng") || desc.includes("fog") || desc.includes("mist") || desc.includes("haze")) return "üå´Ô∏è";
  if (desc.includes("gi√≥ m·∫°nh") || desc.includes("storm") || desc.includes("tropical")) return "üå™Ô∏è";
  return "üå§Ô∏è";
}
function formatWeatherResponse(weather, locationName) {
  if (!weather) return "‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi ti·∫øt.";
  const emoji = getWeatherEmoji(weather.description || "");
  return `${emoji} Th·ªùi ti·∫øt t·∫°i **${locationName}**: ${weather.description}, `
       + `üå°Ô∏è ${Math.round(weather.temperature)}¬∞C (c·∫£m gi√°c ${Math.round(weather.feels_like)}¬∞C), `
       + `üíß ${weather.humidity}%, üå¨Ô∏è ${weather.wind_speed} m/s `
       + `(c·∫≠p nh·∫≠t l√∫c ${new Date(weather.collectedAt).toLocaleString("vi-VN")}).`;
}

// ================== FETCH & UPDATE ==================
async function fetchWeather(city) {
  try {
    const apiName = provinceToApiName[city] || city;
    const url = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(apiName)},VN&appid=${API_KEY}&units=metric&lang=vi`;
    const res = await axios.get(url);
    const d = res.data;
    return {
      temperature: d.main.temp,
      feels_like: d.main.feels_like,
      description: d.weather[0].description,
      humidity: d.main.humidity,
      wind_speed: d.wind.speed,
      collectedAt: new Date().toISOString()
    };
  } catch (err) {
    console.error(`‚ùå L·ªói l·∫•y th·ªùi ti·∫øt cho ${city} (${provinceToApiName[city]}):`, err.message);
    return null;
  }
}

export async function updateWeatherVN34() {
  const results = {};
  for (const city of provincesVN34) {
    const data = await fetchWeather(city);
    if (data) {
      results[city] = data;
      console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${city}`);
    }
    await new Promise(r => setTimeout(r, 800)); // tr√°nh spam API
  }
  await fs.mkdir(path.dirname(weatherFilePath), { recursive: true });
  await fs.writeFile(weatherFilePath, JSON.stringify(results, null, 2), "utf-8");
  console.log(`üéâ ƒê√£ c·∫≠p nh·∫≠t weather.json cho ${Object.keys(results).length}/34 t·ªânh/th√†nh`);
}

// ================== EXTRACT CITY ==================
function extractCity(query) {
  const normQ = normalizeInput(query);

  // Check alias tr∆∞·ªõc
  for (const [province, aliases] of Object.entries(provinceAliases)) {
    if (aliases.some(alias => normQ.includes(alias))) {
      return province;
    }
  }

  // N·∫øu kh√¥ng c√≥ alias th√¨ check tr·ª±c ti·∫øp trong danh s√°ch
  return provincesVN34.find(p => normQ.includes(normalizeInput(p))) || null;
}

// ================== HANDLER ==================
export async function weatherHandler(query) {
  try {
    const content = await fs.readFile(weatherFilePath, "utf8");
    const allData = JSON.parse(content);

    const matchedProvince = extractCity(query);
    if (!matchedProvince) {
      return {
        reply: `‚ùå Kh√¥ng t√¨m th·∫•y t·ªânh/th√†nh n√†o trong c√¢u h·ªèi: "${query}".`,
        source: "weather",
        error: true
      };
    }

    let data = allData[matchedProvince];

    // ‚úÖ N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu trong file ‚Üí fallback g·ªçi API tr·ª±c ti·∫øp
    if (!data) {
      console.warn(`‚ö†Ô∏è Ch∆∞a c√≥ d·ªØ li·ªáu cache cho ${matchedProvince}, g·ªçi API tr·ª±c ti·∫øp...`);
      data = await fetchWeather(matchedProvince);

      if (data) {
        // L∆∞u b·ªï sung v√†o cache ƒë·ªÉ l·∫ßn sau d√πng l·∫°i
        allData[matchedProvince] = data;
        await fs.mkdir(path.dirname(weatherFilePath), { recursive: true });
        await fs.writeFile(weatherFilePath, JSON.stringify(allData, null, 2), "utf-8");
      } else {
        return {
          reply: `‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu th·ªùi ti·∫øt cho ${matchedProvince}.`,
          source: "weather",
          error: true
        };
      }
    }

   return {
  message: formatWeatherResponse(data, matchedProvince),
  source: "weather",
  error: false
};
  } catch (err) {
    console.error("‚ùå L·ªói ƒë·ªçc weather.json:", err.message);

    // ‚úÖ N·∫øu ƒë·ªçc file l·ªói ‚Üí fallback g·ªçi API tr·ª±c ti·∫øp
    const matchedProvince = extractCity(query);
    if (matchedProvince) {
      const data = await fetchWeather(matchedProvince);
      if (data) {
        return {
          reply: formatWeatherResponse(data, matchedProvince),
          source: "weather",
          error: false
        };
      }
    }

    return {
      reply: "‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu th·ªùi ti·∫øt, vui l√≤ng th·ª≠ l·∫°i sau.",
      source: "weather",
      error: true
    };
  }
}

// ================== AUTO UPDATE ==================
async function runUpdate() {
  console.log("üöÄ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t th·ªùi ti·∫øt 34 t·ªânh/th√†nh...");
  await updateWeatherVN34();
  console.log("‚úÖ Ho√†n t·∫•t c·∫≠p nh·∫≠t.");
}

// C·∫≠p nh·∫≠t ngay khi server start
runUpdate();

// L√™n l·ªãch c·∫≠p nh·∫≠t l·∫°i m·ªói 30 ph√∫t
cron.schedule("*/30 * * * *", async () => {
  console.log("‚è∞ Cron job k√≠ch ho·∫°t: c·∫≠p nh·∫≠t th·ªùi ti·∫øt...");
  await runUpdate();
});