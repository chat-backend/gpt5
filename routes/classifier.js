// routes/classifier.js (ESM version)
import dotenv from "dotenv";
dotenv.config();

import OpenAI from "openai";
import { logger, SOURCES } from "./logger.js";

if (!process.env.OPENAI_API_KEY) {
  throw new Error("‚ùå OPENAI_API_KEY ch∆∞a ƒë∆∞·ª£c thi·∫øt l·∫≠p. Bot kh√¥ng th·ªÉ ho·∫°t ƒë·ªông n·∫øu thi·∫øu key.");
}

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
logger.info("‚úÖ OPENAI_API_KEY ƒë√£ ƒë∆∞·ª£c n·∫°p th√†nh c√¥ng.", { source: SOURCES.OPENAI });

export default openai;

// -----------------------
// Rule-based intent classifier (ch·ªâ gi·ªØ intent ƒë·∫∑c bi·ªát)
// -----------------------
export function ruleBasedCategory(q) {
  const text = (q || "").toLowerCase().trim();
  if (!text) return null;

  if (/^(xin ch√†o|ch√†o|hello|hi|hey)/i.test(text)) return "general";
  if (/^(th√™m|ti·∫øp t·ª•c|m·ªü r·ªông|vi·∫øt ti·∫øp)$/i.test(text)) return "expand";
  if (/(t√≥m t·∫Øt|t√≥m g·ªçn|ng·∫Øn g·ªçn|n√≥i ng·∫Øn)/i.test(text)) return "short";
  if (/(gi·∫£i th√≠ch|ƒë·ªãnh nghƒ©a|c√≥ nghƒ©a l√†)/i.test(text)) return "explain";
  if (/(th·ªùi ti·∫øt|nhi·ªát ƒë·ªô|m∆∞a|n·∫Øng|gi√≥|ƒë·ªô ·∫©m|b√£o|√°p th·∫•p|kh√≠ h·∫≠u|tr·ªùi h√¥m nay|ngo√†i tr·ªùi)/i.test(text)) return "weather";
  if (/(tin t·ª©c|tin\s+m·ªõi|tin\s+m·ªõi\s+nh·∫•t|tin\s+h√¥m\s+nay|tin\s+n√≥ng|tin\s+nhanh|tin\s+hot|b·∫£n tin|th·ªùi s·ª±|headline|news|breaking(\s+news)?|hot\s+news|c·∫≠p nh·∫≠t|s·ª± ki·ªán\s+(m·ªõi|h√¥m nay|n·ªïi b·∫≠t)|chuy·ªán g√¨ m·ªõi|ƒë√°ng ch√∫ √Ω)/i.test(text)) return "news";
  if (/(m·∫•y gi·ªù|b√¢y gi·ªù|th·ªùi gian|h√¥m nay l√† ng√†y|ng√†y th√°ng|time|gi·ªù vi·ªát nam|ƒë·ªìng h·ªì|gi·ªù hi·ªán t·∫°i)/i.test(text)) return "time";
  if (/(k·ªÉ.*c√¢u chuy·ªán|truy·ªán c∆∞·ªùi|chuy·ªán vui|joke|funny story|tell.*story)/i.test(text)) return "creative";
  if (/(hi·ªán t·∫°i|b√¢y gi·ªù|current|now|ƒëang l√†)/i.test(text)) {
  return "global";
}

  return "general";
}

// -----------------------
// AI classifier (fallback th√¥ng minh)
// -----------------------
export async function aiClassifier(q) {
  if (!openai) return "general";

  const prompt = `
B·∫°n l√† b·ªô ph√¢n lo·∫°i th√¥ng minh. Ng∆∞·ªùi d√πng c√≥ th·ªÉ h·ªèi b·∫•t k·ª≥ ƒëi·ªÅu g√¨.
H√£y ph√¢n lo·∫°i c√¢u h·ªèi v√†o 1 trong 10 nh√≥m sau:
["weather","news","time","global","knowledge","general","expand","short","explain","creative"]

C√¢u h·ªèi: "${q}"
Ch·ªâ tr·∫£ v·ªÅ ƒë√∫ng 1 t·ª´ trong danh s√°ch tr√™n, kh√¥ng th√™m b·∫•t k·ª≥ k√Ω t·ª± n√†o kh√°c.
N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y ch·ªçn "knowledge".
`;

  try {
    const res = await openai.chat.completions.create({
      model: process.env.OPENAI_MODEL || "gpt-4o-mini",
      messages: [{ role: "user", content: prompt }],
      max_tokens: 3,
      temperature: 0,
    });

    const raw = res?.choices?.[0]?.message?.content || "";
    const cat = raw.trim().toLowerCase();

    const allowed = [
      "weather","news","time","global",
      "knowledge","general","expand","short","explain","creative"
    ];

    return allowed.includes(cat) ? cat : "knowledge";
  } catch (err) {
    console.error("‚ùå AI classifier error:", err.message);
    return "knowledge";
  }
}

// -----------------------
// H√†m ph√¢n lo·∫°i t·ªïng h·ª£p 
// -----------------------
export async function classifyQuery(q) {
  try {
    if (!q || !q.trim()) return "general";

    const MODE = process.env.CLASSIFIER_MODE || "hybrid";

    // Rule-based
    if (MODE === "rule") {
      return ruleBasedCategory(q) || "general";
    }

    // AI classifier
    if (MODE === "ai") {
      return await aiClassifier(q);
    }

    // hybrid (m·∫∑c ƒë·ªãnh)
    const ruleCat = ruleBasedCategory(q);

    // C√°c intent ƒë·∫∑c bi·ªát ‚Üí d√πng lu√¥n rule-based
    const specialIntents = [
      "weather",
      "news",
      "global",
      "time",
      "expand",
      "short",
      "explain",
      "creative",
    ];

    if (specialIntents.includes(ruleCat)) {
      return ruleCat;
    }

    // ‚ùó Fallback sang AI classifier
    const aiCat = await aiClassifier(q);

    // N·∫øu AI classifier tr·∫£ "general" ‚Üí √©p th√†nh "knowledge"
    const finalCat = aiCat === "general" ? "knowledge" : aiCat;

    if (process.env.NODE_ENV === "development") {
      console.log(`üëâ classifyQuery: "${q}" ‚Üí ${finalCat}`);
    }

    return finalCat || "knowledge";
  } catch (err) {
    console.error("‚ùå classifyQuery error:", err.message);
    return "knowledge";
  }
}

// -----------------------
// Ph√¢n lo·∫°i b√†i b√°o tin t·ª©c
// -----------------------
export function classifyNewsArticle(article) {
  if (!article) return "general";
  const text = ((article.title||"")+" "+(article.description||"")+" "+(article.content||"")).toLowerCase();

  if (/(th·ªùi ti·∫øt|m∆∞a|n·∫Øng|b√£o|kh√≠ h·∫≠u|nhi·ªát ƒë·ªô)/.test(text)) return "weather";
  if (/(ch√≠nh tr·ªã|qu·ªëc h·ªôi|b·∫ßu c·ª≠|t·ªïng th·ªëng|ngh·ªã vi·ªán)/.test(text)) return "politics";
  if (/(kinh t·∫ø|th·ªã tr∆∞·ªùng|t√†i ch√≠nh|ch·ª©ng kho√°n|doanh nghi·ªáp)/.test(text)) return "economy";
  if (/(th·ªÉ thao|b√≥ng ƒë√°|c·∫ßu th·ªß|gi·∫£i ƒë·∫•u|world cup|olympic)/.test(text)) return "sports";
  if (/(gi·∫£i tr√≠|showbiz|ca sƒ©|phim|di·ªÖn vi√™n|√¢m nh·∫°c)/.test(text)) return "entertainment";
  if (/(y t·∫ø|s·ª©c kh·ªèe|b·ªánh vi·ªán|d·ªãch b·ªánh|vaccine|ti√™m ch·ªßng|thu·ªëc|kh√°m b·ªánh|ƒëi·ªÅu tr·ªã)/.test(text)) return "health";
  if (/(khoa h·ªçc|c√¥ng ngh·ªá|ai|robot|v≈© tr·ª•|nasa|space|innovation|ph√°t minh|nghi√™n c·ª©u)/.test(text)) return "science-tech";
  if (/(gi√°o d·ª•c|h·ªçc sinh|sinh vi√™n|tr∆∞·ªùng h·ªçc|thi c·ª≠|gi·∫£ng d·∫°y|h·ªçc t·∫≠p)/.test(text)) return "education";
 if (/(hi·ªán t·∫°i|b√¢y gi·ªù|current|now|ƒëang l√†)/i.test(text)) {
  return "global";
}

  return "general";
}

// -----------------------
// Mapping group
// -----------------------
export function mapGroup(intent) {
  switch (intent) {
    case "weather":
    case "news":
    case "global":
    case "politics":
    case "economy":
    case "sports":
    case "entertainment":
    case "science-tech":
    case "education":
    case "health":
      return "external";

    case "time":
    case "chat-history":
      return "internal";

    case "knowledge":
    case "general":
    case "expand":
    case "short":
    case "explain":
    case "creative":
    case "ai":
    case "openai":
    default:
      return "ai";
  }
}