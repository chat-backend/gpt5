// middleware/nluMiddleware.js (ESM version)
import fetch from "node-fetch";
import { classifyQuery } from "../services/classifier.js";
import { logger, SOURCES } from "../utils/logger.js";

function normalize(text) {
  return text.toLowerCase().normalize("NFD").replace(/[\u0300-\u036f]/g, "");
}

async function callAPI(endpoint) {
  try {
    const resp = await fetch(`http://localhost:3000${endpoint}`);
    if (!resp.ok) {
      logger.error(`[callAPI] L·ªói g·ªçi ${endpoint}: ${resp.status}`, { source: SOURCES.SYSTEM });
      return { success: false, error: `API l·ªói ${resp.status}` };
    }
    return await resp.json();
  } catch (err) {
    logger.error(`[callAPI] Exception khi g·ªçi ${endpoint}: ${err.message}`, { source: SOURCES.SYSTEM });
    return { success: false, error: err.message };
  }
}

async function extractCountryNameSmart(text) {
  const data = await callAPI("/countries");
  const countries = data.countries || [];
  const normText = normalize(text);

  for (const c of countries) {
    const allNames = [c.name, c.code, ...(c.aliases || [])];
    for (const n of allNames) {
      if (normText.includes(normalize(n))) {
        logger.info(`[NLU] Nh·∫≠n di·ªán qu·ªëc gia: ${c.name}`, { source: SOURCES.SYSTEM });
        return c.name;
      }
    }
  }
  return null;
}

export async function nluMiddleware(req, res, next) {
  try {
    const { message } = req.body;
    if (!message) {
      return res.status(400).json({ success: false, error: "Thi·∫øu message" });
    }

    const text = normalize(message);

    // 1. Ph√¢n lo·∫°i intent t·ªïng qu√°t
    const category = await classifyQuery(message);

    // ƒê·ªãnh tuy·∫øn s·ªõm sang c√°c router chuy√™n tr√°ch
    if (["weather", "news", "search"].includes(category)) {
      logger.info(`[NLU] ƒê·ªãnh tuy·∫øn s·ªõm sang router: ${category}`, { source: SOURCES.SYSTEM });
      return next(); // ƒë·ªÉ router t∆∞∆°ng ·ª©ng x·ª≠ l√Ω
    }

    // 2. Intent: h·ªèi t·ªïng s·ªë qu·ªëc gia
    if (
      text.includes("bao nhieu quoc gia") ||
      text.includes("tong so quoc gia") ||
      text.includes("may nuoc") ||
      text.includes("tong so nuoc")
    ) {
      const data = await callAPI("/countries");
      const examples = (data.countries || []).slice(0, 3).map(c => c.name).join(", ");
      return res.json({
        success: true,
        reply: `üåç Hi·ªán nay c√≥ ${data.total || 0} qu·ªëc gia ƒë∆∞·ª£c c√¥ng nh·∫≠n tr√™n th·∫ø gi·ªõi.\nV√≠ d·ª•: ${examples}.\n‚û°Ô∏è Con s·ªë n√†y ph·∫£n √°nh s·ª± ƒëa d·∫°ng v·ªÅ vƒÉn h√≥a v√† l·ªãch s·ª≠ to√†n c·∫ßu.`
      });
    }

    // 3. Intent: h·ªèi th√¥ng tin m·ªôt qu·ªëc gia c·ª• th·ªÉ
    if (text.includes("nuoc") || text.includes("quoc gia")) {
      const countryName = await extractCountryNameSmart(text);
      if (countryName) {
        const data = await callAPI(`/countries/${countryName}`);
        if (data.success) {
          const c = data.country;
          return res.json({
            success: true,
            reply: `${c.flag} ${c.name} n·∫±m ·ªü khu v·ª±c ${c.region}.\nTh·ªß ƒë√¥: ${c.capital}.\nD√¢n s·ªë: ${c.population.toLocaleString()} ng∆∞·ªùi.\n‚ú® ${c.summary}`
          });
        } else {
          logger.warn(`[NLU] Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ${countryName}`, { source: SOURCES.SYSTEM });
          return res.json({ success: false, reply: data.error || `Kh√¥ng t√¨m th·∫•y th√¥ng tin cho ${countryName}` });
        }
      }
    }

    // 4. N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ‚Üí fallback (v√≠ d·ª• nlpService)
    return next();

  } catch (err) {
    logger.error("NLU error:", { error: err.message, source: SOURCES.SYSTEM });
    return res.status(500).json({ success: false, error: "L·ªói x·ª≠ l√Ω NLU" });
  }
}